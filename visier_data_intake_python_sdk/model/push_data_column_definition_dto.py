# coding: utf-8

"""
    Visier Data Intake APIs

    Visier APIs for sending raw or untransformed source data to Visier

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_intake_python_sdk import schemas  # noqa: F401


class PushDataColumnDefinitionDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Definition of the source column.
    """


    class MetaOapg:
        
        class properties:
            columnName = schemas.StrSchema
            dataType = schemas.StrSchema
        
            @staticmethod
            def dataFormats() -> typing.Type['PushDataColumnDefinitionDTODataFormats']:
                return PushDataColumnDefinitionDTODataFormats
            isMandatory = schemas.BoolSchema
            allowEmpty = schemas.BoolSchema
            defaultValue = schemas.StrSchema
            __annotations__ = {
                "columnName": columnName,
                "dataType": dataType,
                "dataFormats": dataFormats,
                "isMandatory": isMandatory,
                "allowEmpty": allowEmpty,
                "defaultValue": defaultValue,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnName"]) -> MetaOapg.properties.columnName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataFormats"]) -> 'PushDataColumnDefinitionDTODataFormats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMandatory"]) -> MetaOapg.properties.isMandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowEmpty"]) -> MetaOapg.properties.allowEmpty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultValue"]) -> MetaOapg.properties.defaultValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["columnName", "dataType", "dataFormats", "isMandatory", "allowEmpty", "defaultValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnName"]) -> typing.Union[MetaOapg.properties.columnName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataType"]) -> typing.Union[MetaOapg.properties.dataType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataFormats"]) -> typing.Union['PushDataColumnDefinitionDTODataFormats', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMandatory"]) -> typing.Union[MetaOapg.properties.isMandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowEmpty"]) -> typing.Union[MetaOapg.properties.allowEmpty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultValue"]) -> typing.Union[MetaOapg.properties.defaultValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["columnName", "dataType", "dataFormats", "isMandatory", "allowEmpty", "defaultValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        columnName: typing.Union[MetaOapg.properties.columnName, str, schemas.Unset] = schemas.unset,
        dataType: typing.Union[MetaOapg.properties.dataType, str, schemas.Unset] = schemas.unset,
        dataFormats: typing.Union['PushDataColumnDefinitionDTODataFormats', schemas.Unset] = schemas.unset,
        isMandatory: typing.Union[MetaOapg.properties.isMandatory, bool, schemas.Unset] = schemas.unset,
        allowEmpty: typing.Union[MetaOapg.properties.allowEmpty, bool, schemas.Unset] = schemas.unset,
        defaultValue: typing.Union[MetaOapg.properties.defaultValue, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PushDataColumnDefinitionDTO':
        return super().__new__(
            cls,
            *args,
            columnName=columnName,
            dataType=dataType,
            dataFormats=dataFormats,
            isMandatory=isMandatory,
            allowEmpty=allowEmpty,
            defaultValue=defaultValue,
            _configuration=_configuration,
            **kwargs,
        )

from visier_data_intake_python_sdk.model.push_data_column_definition_dto_data_formats import PushDataColumnDefinitionDTODataFormats

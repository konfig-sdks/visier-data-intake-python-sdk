# coding: utf-8

"""
    Visier Data Intake APIs

    Visier APIs for sending raw or untransformed source data to Visier

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_intake_python_sdk import schemas  # noqa: F401


class Source(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            sourceId = schemas.StrSchema
            sourceName = schemas.StrSchema
            dataSize = schemas.StrSchema
            rows = schemas.StrSchema
            status = schemas.StrSchema
            message = schemas.StrSchema
            __annotations__ = {
                "sourceId": sourceId,
                "sourceName": sourceName,
                "dataSize": dataSize,
                "rows": rows,
                "status": status,
                "message": message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceName"]) -> MetaOapg.properties.sourceName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSize"]) -> MetaOapg.properties.dataSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rows"]) -> MetaOapg.properties.rows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceId", "sourceName", "dataSize", "rows", "status", "message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceId"]) -> typing.Union[MetaOapg.properties.sourceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceName"]) -> typing.Union[MetaOapg.properties.sourceName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSize"]) -> typing.Union[MetaOapg.properties.dataSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rows"]) -> typing.Union[MetaOapg.properties.rows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceId", "sourceName", "dataSize", "rows", "status", "message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sourceId: typing.Union[MetaOapg.properties.sourceId, str, schemas.Unset] = schemas.unset,
        sourceName: typing.Union[MetaOapg.properties.sourceName, str, schemas.Unset] = schemas.unset,
        dataSize: typing.Union[MetaOapg.properties.dataSize, str, schemas.Unset] = schemas.unset,
        rows: typing.Union[MetaOapg.properties.rows, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Source':
        return super().__new__(
            cls,
            *args,
            sourceId=sourceId,
            sourceName=sourceName,
            dataSize=dataSize,
            rows=rows,
            status=status,
            message=message,
            _configuration=_configuration,
            **kwargs,
        )

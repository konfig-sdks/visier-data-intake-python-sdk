# coding: utf-8

"""
    Visier Data Intake APIs

    Visier APIs for sending raw or untransformed source data to Visier

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_intake_python_sdk import schemas  # noqa: F401


class DataTransferResultDetail(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            tenantCode = schemas.StrSchema
        
            @staticmethod
            def sourceNames() -> typing.Type['DataTransferResultDetailSourceNames']:
                return DataTransferResultDetailSourceNames
            dataSize = schemas.StrSchema
            rows = schemas.StrSchema
            __annotations__ = {
                "tenantCode": tenantCode,
                "sourceNames": sourceNames,
                "dataSize": dataSize,
                "rows": rows,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantCode"]) -> MetaOapg.properties.tenantCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceNames"]) -> 'DataTransferResultDetailSourceNames': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSize"]) -> MetaOapg.properties.dataSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rows"]) -> MetaOapg.properties.rows: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tenantCode", "sourceNames", "dataSize", "rows", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantCode"]) -> typing.Union[MetaOapg.properties.tenantCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceNames"]) -> typing.Union['DataTransferResultDetailSourceNames', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSize"]) -> typing.Union[MetaOapg.properties.dataSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rows"]) -> typing.Union[MetaOapg.properties.rows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tenantCode", "sourceNames", "dataSize", "rows", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tenantCode: typing.Union[MetaOapg.properties.tenantCode, str, schemas.Unset] = schemas.unset,
        sourceNames: typing.Union['DataTransferResultDetailSourceNames', schemas.Unset] = schemas.unset,
        dataSize: typing.Union[MetaOapg.properties.dataSize, str, schemas.Unset] = schemas.unset,
        rows: typing.Union[MetaOapg.properties.rows, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataTransferResultDetail':
        return super().__new__(
            cls,
            *args,
            tenantCode=tenantCode,
            sourceNames=sourceNames,
            dataSize=dataSize,
            rows=rows,
            _configuration=_configuration,
            **kwargs,
        )

from visier_data_intake_python_sdk.model.data_transfer_result_detail_source_names import DataTransferResultDetailSourceNames
